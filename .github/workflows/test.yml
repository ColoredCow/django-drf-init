# Disabled GitHub Actions workflow for running tests with pytest.
name: Tests

on:
  pull_request:
    branches: [main, develop]

permissions:
  contents: read
  pull-requests: write

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10

    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_pass
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    env:
      DB_NAME: test_db
      DB_USER: test_user
      DB_PASSWORD: test_pass
      DB_HOST: localhost
      DB_PORT: 5432
      DJANGO_ENV: test
      DJANGO_SETTINGS_MODULE: mainapp.settings
      DEBUG: true
      SECRET_KEY: dummysecret
      ALLOWED_HOSTS: localhost
      CORS_ALLOWED_ORIGINS: http://localhost:3000
      CORS_ALLOW_CREDENTIALS: true
      DEFAULT_FROM_EMAIL: test@example.com
      EMAIL_BACKEND: django.core.mail.backends.console.EmailBackend
      EMAIL_HOST: localhost
      FRONTEND_URL: http://localhost:3000
      EMAIL_HOST_USER: test
      EMAIL_HOST_PASSWORD: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
            path: ~/.cache/pip
            key: ${{ runner.os }}-pip-${{ hashFiles('requirements/dev.txt') }}
            restore-keys: |
              ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/dev.txt

      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5432; do
            echo "Waiting for PostgreSQL..."
            sleep 1
          done

      - name: Run migrations
        run: |
          python manage.py migrate

      - name: Run tests with coverage
        run: |
          coverage erase
          coverage run --rcfile=.coveragerc manage.py test
          coverage report > coverage.txt

      - name: Format coverage summary
        id: cov
        run: |
          # Get the line that starts with TOTAL (works even with trailing spaces)
          TOTAL_LINE=$(grep -E '^TOTAL(\s|$)' coverage.txt)

          # Extract the last column (coverage %)
          COVERAGE=$(echo $TOTAL_LINE | awk '{print $NF}')

          # Strip the % sign to get an integer
          PERCENT=$(echo $COVERAGE | tr -d '%')

          # Use default if PERCENT is empty
          if [ -z "$PERCENT" ]; then
            PERCENT=0
          fi

          # Decide emoji based on % threshold
          if [ "$PERCENT" -ge 90 ]; then
            EMOJI="ðŸŸ¢"
          elif [ "$PERCENT" -ge 70 ]; then
            EMOJI="ðŸŸ¡"
          else
            EMOJI="ðŸ”´"
          fi

          # Create PR comment with nice formatting
          echo "### $EMOJI Test Coverage: $COVERAGE" > cov_comment.txt
          echo "" >> cov_comment.txt
          echo '```text' >> cov_comment.txt
          cat coverage.txt >> cov_comment.txt
          echo '```' >> cov_comment.txt

      - name: Comment coverage on PR
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          path: cov_comment.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
